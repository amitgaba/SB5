PROCEDURE "MT_VIRTUAL_TABLES.DB::Compare_Exec_Time" (IN view_ID Integer, IN ITEM Integer, OUT exec_time Integer, OUT beforetime secondtime,
	OUT  aftertime secondtime, OUT outsql varchar(5000) )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
    /*************************************
       Write your procedure logic 
   *************************************/
declare SQLQUERY varchar(8000);
declare outcolsquery nvarchar(8000);
declare view_name varchar(250);
declare filter varchar(500);
declare outcol varchar(500);
declare schema_name varchar(500);
declare table_name varchar(100);
declare table_name1 varchar(100);
declare tfolder varchar(255);
declare sfolder varchar(255);
declare tfile varchar(255);
declare ov_error_message string;
declare access nvarchar(1);
declare plhold varchar(1000);
declare count_rec integer;

DECLARE EXIT HANDLER FOR SQLEXCEPTION 
BEGIN
-- Set status as E(Error) 
-- ov_error_code := ::sql_error_code;				-- SQL Error Code
ov_error_message := ::sql_error_message;		-- Error Message
insert into "MT_VIRTUAL_TABLES.DB::DataModel.EXTRACT_ERROR" values(:view_id,:item,0,current_timestamp,::sql_error_code, ::Sql_error_message);


END;   

select max(a.view_name) into view_name 
	from
	"MT_VIRTUAL_TABLES.DB::DataModel.VIRTUAL_H" as a
	where a.id = :view_id;

select max(a.schema_name) into schema_name 
	from
	"MT_VIRTUAL_TABLES.DB::DataModel.VIRTUAL_H" as a
	where a.id = :view_id ;
	
select max(a.filter) into filter from "MT_VIRTUAL_TABLES.DB::DataModel.VIRTUAL_I" as a
	where a.id = :view_id and
		  a.item = :item;

select max(a.outcols) into outcol from "MT_VIRTUAL_TABLES.DB::DataModel.VIRTUAL_I" as a
	where a.id = :view_id and
		  a.item = :item;
		  
select max(a.plhold) into plhold from "MT_VIRTUAL_TABLES.DB::DataModel.VIRTUAL_I" as a
	where a.id = :view_id and
		  a.item = :item;

select trim(:outcol) into outcol from 	"MT_VIRTUAL_TABLES.DB::Dummy";

--if :outcol = '' or :outcol = '*'   then 
lt_outcols = select a.column_name as matnr
				from "MT_VIRTUAL_TABLES.DB::VIEW_COLUMNS" as a
					where view_name = :view_name 
					and schema_name = :schema_name
					group by a.column_name;

--else
--lt_outcols = select * from "MT_VIRTUAL_TABLES.DB::SPLIT_STRING"(:outcol);
--end if;

select
String_Agg(columnStr, ', ' order by position)
into outcolsquery
from ( select
  min(position) as position,
  '"' || column_name || 
  '" '  
as columnStr
 from "MT_VIRTUAL_TABLES.DB::VIEW_COLUMNS" as a
 inner join :lt_outcols as b
	on b.matnr = a.column_name
 where view_name = :view_name 
  and schema_name = :schema_name
 group by a.column_name
 order by position
 
);

select current_time into beforetime from "MT_VIRTUAL_TABLES.DB::Dummy";

 if ifnull(:filter,'') <> '' then 
 select  ' SELECT ' || outcolsquery || ' FROM "' || :schema_name || '"."' || :view_name || '"' || ' where ' || :filter ||';' 
 into "SQLQUERY" from  "MT_VIRTUAL_TABLES.DB::Dummy";
 else
 select ' SELECT ' || outcolsquery || ' FROM "' || :schema_name || '"."' || :view_name  ||  '"' || plhold || ';' 
 into "SQLQUERY" from  "MT_VIRTUAL_TABLES.DB::Dummy";
 end if;
select :SQLQUERY into outsql from "MT_VIRTUAL_TABLES.DB::Dummy";
 EXECUTE IMMEDIATE :SQLQUERY;
select current_time into aftertime from "MT_VIRTUAL_TABLES.DB::Dummy";
   
select seconds_between(:beforetime,:aftertime) into exec_time from "MT_VIRTUAL_TABLES.DB::Dummy";

create  TABLE TEMP_TAB ( COUNT_REC Integer );

if ifnull(:filter,'') <> '' then 
 select  'INSERT INTO TEMP_TAB SELECT count(*) as COUNT_REC FROM "' || :schema_name || '"."' || :view_name || '" ' || ' where ' || :filter ||';' 
 into "SQLQUERY" from  "MT_VIRTUAL_TABLES.DB::Dummy";
 else
 select ' INSERT INTO TEMP_TAB  SELECT count(*) as COUNT_REC FROM "' || :schema_name || '"."' || :view_name  ||  '" ' || plhold || ';' 
 into "SQLQUERY" from  "MT_VIRTUAL_TABLES.DB::Dummy";
 end if;
 EXECUTE IMMEDIATE :SQLQUERY;
 
  select max(count_rec) into count_Rec  from temp_Tab;
  drop table temp_Tab;
  insert into "MT_VIRTUAL_TABLES.DB::DataModel.EXEC_TIME_COMPARE" values(view_ID,item,current_timestamp,:exec_time,:count_rec,'');
   
END